---
import Container from '@/components/Container.astro'
import AboutMe from '@/components/sections/AboutMe.astro'
import MyExperience from '@/components/sections/MyExperience.astro'
import type { PgMainSection } from '@/services/types'

interface Props {
  sections: PgMainSection[]
}

const { sections } = Astro.props

function parsedText(input: string): Array<{ text: string; featured: boolean }> {
  const regex = /\*\*(.*?)\*\*/g
  const parts = input.split(regex)

  return parts.map((text, index) => ({
    text,
    featured: index % 2 === 1,
  }))
}
---

<Container unlimited class="dark-y-gradient">
  <Container
    as="section"
    class="relative py-16 before:top-0 before:bottom-16 before:left-0 before:w-0.75 before:bg-gradient-to-b before:from-transparent before:via-gray-500 before:to-transparent before:content-none xl:before:absolute xl:before:content-['']"
  >
    {
      sections.map(({ fields: { id, title, description, featured, additional } }, index) => {
        const parsedDescription = description.map(({ fields }) => ({
          props: fields,
          parsed: parsedText(fields.label),
        }))
        const parsedFeaturedItems = featured?.map(({ fields }) => ({
          link: {
            to: fields.href,
            btn: fields.asButton,
            external: fields.external,
            featured: fields.featured,
          },
          image: {
            lazy: true,
            alt: fields.image?.fields?.alt,
            title: fields.image?.fields?.title,
            width: fields.image?.fields?.width,
            height: fields.image?.fields?.height,
            src: fields.image?.fields.source.fields.file.url,
          },
        }))

        if (id === 'about-me')
          return (
            <AboutMe
              {id}
              {additional}
              orderNumber={index + 1}
              title={{
                props: title.fields,
                parsed: parsedText(title.fields.label),
              }}
              description={parsedDescription}
              featuredItems={parsedFeaturedItems}
            />
          )

        if (id === 'my-experience')
          return (
            <MyExperience
              {id}
              {additional}
              orderNumber={index + 1}
              title={{
                props: title.fields,
                parsed: parsedText(title.fields.label),
              }}
              description={parsedDescription}
              featuredItems={parsedFeaturedItems}
            />
          )
      })
    }
  </Container>
</Container>
